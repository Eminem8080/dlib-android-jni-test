// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Landmark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RectF;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Face;
}  // namespace protobuf_messages_2eproto
namespace com {
namespace my {
namespace jni {
namespace dlib {
namespace data {
class LandmarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Landmark>
      _instance;
} _Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandmarkList>
      _instance;
} _LandmarkList_default_instance_;
class RectFDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectF>
      _instance;
} _RectF_default_instance_;
class RectFListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectFList>
      _instance;
} _RectFList_default_instance_;
class FaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Face>
      _instance;
} _Face_default_instance_;
class FaceListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceList>
      _instance;
} _FaceList_default_instance_;
}  // namespace data
}  // namespace dlib
}  // namespace jni
}  // namespace my
}  // namespace com
namespace protobuf_messages_2eproto {
static void InitDefaultsLandmark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_Landmark_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::Landmark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::Landmark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Landmark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLandmark}, {}};

static void InitDefaultsLandmarkList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_LandmarkList_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::LandmarkList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::LandmarkList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandmarkList}, {
      &protobuf_messages_2eproto::scc_info_Landmark.base,}};

static void InitDefaultsRectF() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_RectF_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::RectF();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::RectF::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RectF =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRectF}, {}};

static void InitDefaultsRectFList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_RectFList_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::RectFList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::RectFList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RectFList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRectFList}, {
      &protobuf_messages_2eproto::scc_info_RectF.base,}};

static void InitDefaultsFace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_Face_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::Face();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::Face::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Face =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFace}, {
      &protobuf_messages_2eproto::scc_info_RectF.base,
      &protobuf_messages_2eproto::scc_info_Landmark.base,}};

static void InitDefaultsFaceList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::my::jni::dlib::data::_FaceList_default_instance_;
    new (ptr) ::com::my::jni::dlib::data::FaceList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::my::jni::dlib::data::FaceList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceList}, {
      &protobuf_messages_2eproto::scc_info_Face.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Landmark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandmarkList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RectF.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RectFList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Face.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceList.base);
}

}  // namespace protobuf_messages_2eproto
namespace com {
namespace my {
namespace jni {
namespace dlib {
namespace data {

// ===================================================================

void Landmark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kXFieldNumber;
const int Landmark::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Landmark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
}

void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Landmark& Landmark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Landmark.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.Landmark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.Landmark)
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.Landmark)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Landmark*>(&from));
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Landmark::GetTypeName() const {
  return "com.my.jni.dlib.data.Landmark";
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkList::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkList::LandmarkList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_LandmarkList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.LandmarkList)
}

void LandmarkList::SharedCtor() {
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.LandmarkList)
  SharedDtor();
}

void LandmarkList::SharedDtor() {
}

void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList& LandmarkList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_LandmarkList.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.LandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  _internal_metadata_.Clear();
}

bool LandmarkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.LandmarkList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.LandmarkList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.LandmarkList)
  return false;
#undef DO_
}

void LandmarkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.LandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->landmarks(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.LandmarkList)
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.LandmarkList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->landmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmarks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LandmarkList*>(&from));
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::Swap(LandmarkList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  CastToBase(&landmarks_)->InternalSwap(CastToBase(&other->landmarks_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LandmarkList::GetTypeName() const {
  return "com.my.jni.dlib.data.LandmarkList";
}


// ===================================================================

void RectF::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectF::kLeftFieldNumber;
const int RectF::kTopFieldNumber;
const int RectF::kRightFieldNumber;
const int RectF::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectF::RectF()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_RectF.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.RectF)
}
RectF::RectF(const RectF& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.RectF)
}

void RectF::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

RectF::~RectF() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.RectF)
  SharedDtor();
}

void RectF::SharedDtor() {
}

void RectF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectF& RectF::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_RectF.base);
  return *internal_default_instance();
}


void RectF::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.RectF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear();
}

bool RectF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.RectF)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bottom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.RectF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.RectF)
  return false;
#undef DO_
}

void RectF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.RectF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // float top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // float right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.RectF)
}

size_t RectF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.RectF)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // float left = 1;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (this->top() != 0) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectF::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RectF*>(&from));
}

void RectF::MergeFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.RectF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void RectF::CopyFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectF::IsInitialized() const {
  return true;
}

void RectF::Swap(RectF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectF::InternalSwap(RectF* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RectF::GetTypeName() const {
  return "com.my.jni.dlib.data.RectF";
}


// ===================================================================

void RectFList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectFList::kRectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectFList::RectFList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_RectFList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.RectFList)
}
RectFList::RectFList(const RectFList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.RectFList)
}

void RectFList::SharedCtor() {
}

RectFList::~RectFList() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.RectFList)
  SharedDtor();
}

void RectFList::SharedDtor() {
}

void RectFList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectFList& RectFList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_RectFList.base);
  return *internal_default_instance();
}


void RectFList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.RectFList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  _internal_metadata_.Clear();
}

bool RectFList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.RectFList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.my.jni.dlib.data.RectF rects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.RectFList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.RectFList)
  return false;
#undef DO_
}

void RectFList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.RectFList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.my.jni.dlib.data.RectF rects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->rects(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.RectFList)
}

size_t RectFList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.RectFList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .com.my.jni.dlib.data.RectF rects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectFList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RectFList*>(&from));
}

void RectFList::MergeFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.RectFList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
}

void RectFList::CopyFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.RectFList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectFList::IsInitialized() const {
  return true;
}

void RectFList::Swap(RectFList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectFList::InternalSwap(RectFList* other) {
  using std::swap;
  CastToBase(&rects_)->InternalSwap(CastToBase(&other->rects_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RectFList::GetTypeName() const {
  return "com.my.jni.dlib.data.RectFList";
}


// ===================================================================

void Face::InitAsDefaultInstance() {
  ::com::my::jni::dlib::data::_Face_default_instance_._instance.get_mutable()->bound_ = const_cast< ::com::my::jni::dlib::data::RectF*>(
      ::com::my::jni::dlib::data::RectF::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kBoundFieldNumber;
const int Face::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Face.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.Face)
}
Face::Face(const Face& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bound()) {
    bound_ = new ::com::my::jni::dlib::data::RectF(*from.bound_);
  } else {
    bound_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.Face)
}

void Face::SharedCtor() {
  bound_ = NULL;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != internal_default_instance()) delete bound_;
}

void Face::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Face& Face::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Face.base);
  return *internal_default_instance();
}


void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.Face)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  if (GetArenaNoVirtual() == NULL && bound_ != NULL) {
    delete bound_;
  }
  bound_ = NULL;
  _internal_metadata_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.Face)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.my.jni.dlib.data.RectF bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.my.jni.dlib.data.Landmark landmarks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.Face)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.my.jni.dlib.data.RectF bound = 1;
  if (this->has_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_bound(), output);
  }

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->landmarks(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.Face)
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.Face)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .com.my.jni.dlib.data.Landmark landmarks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->landmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmarks(static_cast<int>(i)));
    }
  }

  // .com.my.jni.dlib.data.RectF bound = 1;
  if (this->has_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bound_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Face::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Face*>(&from));
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from.has_bound()) {
    mutable_bound()->::com::my::jni::dlib::data::RectF::MergeFrom(from.bound());
  }
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  using std::swap;
  CastToBase(&landmarks_)->InternalSwap(CastToBase(&other->landmarks_));
  swap(bound_, other->bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Face::GetTypeName() const {
  return "com.my.jni.dlib.data.Face";
}


// ===================================================================

void FaceList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceList::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceList::FaceList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_FaceList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.my.jni.dlib.data.FaceList)
}
FaceList::FaceList(const FaceList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.my.jni.dlib.data.FaceList)
}

void FaceList::SharedCtor() {
}

FaceList::~FaceList() {
  // @@protoc_insertion_point(destructor:com.my.jni.dlib.data.FaceList)
  SharedDtor();
}

void FaceList::SharedDtor() {
}

void FaceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceList& FaceList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_FaceList.base);
  return *internal_default_instance();
}


void FaceList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.my.jni.dlib.data.FaceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faces_.Clear();
  _internal_metadata_.Clear();
}

bool FaceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.my.jni.dlib.data.FaceList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.my.jni.dlib.data.Face faces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.my.jni.dlib.data.FaceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.my.jni.dlib.data.FaceList)
  return false;
#undef DO_
}

void FaceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.my.jni.dlib.data.FaceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.my.jni.dlib.data.Face faces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->faces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->faces(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:com.my.jni.dlib.data.FaceList)
}

size_t FaceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.my.jni.dlib.data.FaceList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .com.my.jni.dlib.data.Face faces = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->faces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->faces(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FaceList*>(&from));
}

void FaceList::MergeFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.my.jni.dlib.data.FaceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faces_.MergeFrom(from.faces_);
}

void FaceList::CopyFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.my.jni.dlib.data.FaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceList::IsInitialized() const {
  return true;
}

void FaceList::Swap(FaceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceList::InternalSwap(FaceList* other) {
  using std::swap;
  CastToBase(&faces_)->InternalSwap(CastToBase(&other->faces_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FaceList::GetTypeName() const {
  return "com.my.jni.dlib.data.FaceList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace dlib
}  // namespace jni
}  // namespace my
}  // namespace com
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::Landmark* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::Landmark >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::Landmark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::LandmarkList* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::LandmarkList >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::LandmarkList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::RectF* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::RectF >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::RectF >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::RectFList* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::RectFList >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::RectFList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::Face* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::Face >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::Face >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::my::jni::dlib::data::FaceList* Arena::CreateMaybeMessage< ::com::my::jni::dlib::data::FaceList >(Arena* arena) {
  return Arena::CreateInternal< ::com::my::jni::dlib::data::FaceList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
